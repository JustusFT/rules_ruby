#!/usr/bin/env bash

set -e

# shellcheck disable=SC1091
source "bin/deps"

export SHELL_INIT="${HOME}/.bashrc"
export BUNDLE_PATH="${BUNDLE_PATH:-${HOME}/.bundle/gems}"
export PATH="${HOME}/.rbenv/bin:${HOME}/.rbenv/shims:/usr/local/bin:/usr/bin:/bin:/sbin:/usr/sbin:/opt/local/bin"

export BAZEL_OPTS="--host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m"
export BAZEL_BUILD_OPTS="--curses=no --verbose_failures -j 15 --show_progress_rate_limit 0 "
export BAZEL_TEST_OPTS="--verbose_failures --test_output=streamed --test_verbose_timeout_warnings "
export RUBY_VERSION=$(cat .ruby-version)

export BashMatic__Expr="
  source ${SHELL_INIT}
  [[ -f ${HOME}/.bashmatic/init.sh ]] && source ${HOME}/.bashmatic/init.sh
  set -e
"

[[ -n ${DEBUG} ]] && set -x

trap exit 1 INT

# Runs Rubocop Tests
test::rubocop() {
  set -e
  /usr/bin/env bash -c " 
    ${BashMatic__Expr}
    h2 'Running target: rubocop'
    bundle install --path=${BUNDLE_PATH}
    bundle exec rubocop -E -D .rubocop.yml --force-exclusion
  "
}

# Runs Buildifier
test::buildifier() {
  set -e
  /usr/bin/env bash -c "
    ${BashMatic__Expr}
    h2 'Running target: buildifier'
    bazel run :buildifier-check
  "
}

# Builds and runs workspace inside examples/simple_script
test::simple-script() {
  set -e
  /usr/bin/env bash -c "
    ${BashMatic__Expr}
    h2 'Testing target: simple-script'
    bazel ${BAZEL_OPTS} info
    bazel ${BAZEL_OPTS} build ${BAZEL_BUILD_OPTS} -- //...
    bazel ${BAZEL_OPTS} test ${BAZEL_BUILD_OPTS} ${BAZEL_TEST_OPTS} -- //...
    bazel ${BAZEL_OPTS} run ${BAZEL_BUILD_OPTS} -- :rubocop
  "
}

test::workspace() {
  set -e
  /usr/bin/env bash -c "
    ${BashMatic__Expr}
    h2 'Testing target: workspace'
    bazel ${BAZEL_OPTS} build ${BAZEL_BUILD_OPTS} -- //...
    bazel ${BAZEL_OPTS} test ${BAZEL_BUILD_OPTS} ${BAZEL_TEST_OPTS} -- //...
  "
}

# Private 
test::bazel-info() {
  set -e
  /usr/bin/env bash -c "
    ${BashMatic__Expr}
    h2 'Testing target: bazel-info'
    bazel ${BAZEL_OPTS} version
    bazel ${BAZEL_OPTS} info
    bazel ${BAZEL_OPTS} fetch --curses=no -- '//ruby/...'
  "
}

test::all() {
  test::bazel-info
  test::workspace
  test::simple-script
  test::buildifier
  test::rubocop
}

#—————————————————————————————————————————————————————————————————————————————————————————————————————————————

ci::setup::environment() {
  # shellcheck disable=SC2016
  grep -q 'bashmatic/init.sh' ${SHELL_INIT}   || echo '[[ -d ${HOME}/.bashmatic ]] && source ${HOME}/.bashmatic/init.sh' >> "${SHELL_INIT}"

  [[ -n $(command -v rbenv) ]] && {
    export PATH="${HOME}/.rbenv/shims:${HOME}/.rbenv/bin:/usr/local/bin:/usr/bin:/bin:${PATH}"
    # shellcheck disable=SC2016
    grep -q 'rbenv/shims' ${SHELL_INIT} || echo 'export PATH="$HOME/.rbenv/bin:${HOME}/.rbenv/shims:$PATH"' >>"${SHELL_INIT}"

    eval "$(rbenv init -)"

    # shellcheck disable=SC2016
    grep -q 'rbenv init' ${SHELL_INIT}  || echo 'eval "$(rbenv init -)"' >>"${SHELL_INIT}"
  }
}  

ci::setup::rbenv-ruby() {
  set -ex

  if [[ ! -d ${HOME}/.rbenv || -z $(command -v rbenv) ]]; then
    rm -rf ${HOME}/.rbenv
    git clone https://github.com/rbenv/rbenv.git "${HOME}/.rbenv"
  fi

  export PATH="${HOME}/.rbenv/bin:${HOME}/.rbenv/shims:${PATH}"

  local rbenv_plugins="${HOME}/.rbenv/plugins/ruby-build"

  if [[ ! -d "${rbenv_plugins}" ]]; then
    git clone https://github.com/rbenv/ruby-build.git "${rbenv_plugins}"
  fi

  set +x

  ci::setup::environment

  bash -c "
    source ${SHELL_INIT}
    set -e
    rbenv install -s ${RUBY_VERSION}
    rbenv global ${RUBY_VERSION}
    rbenv rehash
    ruby --version
    gem update --system --no-doc
    gem install bundler --version 2.0.2 --no-doc
    bundle install --jobs=4 --retry=3 --path \"${BUNDLE_PATH}\"
  "
}

ci::setup() {
  [[ -f ${SHELL_INIT} ]] && source ${SHELL_INIT}

  if [[ -n $(command -v ruby) ]]; then
    CURRENT_VERSION=$(ruby -e 'puts RUBY_VERSION')
    if [[ ${CURRENT_VERSION} != "${RUBY_VERSION}" ]]; then
      ci::setup::rbenv-ruby
    else
      info "Ruby already exists and matches the version:"
      info "$(which ruby), version: ${bldylw}$(ruby --version)"
    fi
  else
    hl::subtle "Ruby wasn't found, installing via rbenv..."
    ci::setup::rbenv-ruby
  fi
}


ci::main() {
  local action="${1:-"all"}"
  local func="test::${action}"

  box::green-in-cyan "Rules Ruby Test Runner"

  ci::setup

  if [[ -n ${action} && ${action} != "all" ]] ; then
    shift
    if lib::util::is-a-function "${func}"; then
      h2 "Executing partial tests for action ${bldylw}${action}"
      test::bazel-info
      ${func} "$@"
    else
      error "Invalid action ${action}." "List of valid actions are: $(lib::util::functions-matching 'test::')"
      exit 1
    fi
  else
    test::all
  fi
}

ci::main "$@"

set +x

